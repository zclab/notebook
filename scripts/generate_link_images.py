"""
Use playwright to build a gallery of website using this theme
"""

from pathlib import Path
from yaml import safe_load
from shutil import copy
from playwright.sync_api import sync_playwright, TimeoutError
from rich.progress import track
from rich import print


def regenerate_links(file_name):
    """
    Regenerate images of snapshots for our links.
    This function should only be triggered in RTD builds as it increases the build
    time by 30-60s. Developers can still execute this function from time to time to
    populate their local links images with updated files.
    """

    # get the existing folders path
    _static_dir = Path(__file__).parents[1] / "docs" / "_static"
    _images_dir = Path(__file__).parents[1] / "docs" / "_images"

    # create the static gallery folder where we'll put the gallery source files
    link_img_dir = _images_dir / "links" / file_name.split('.')[0]
    link_img_dir.mkdir(parents=True, exist_ok=True)

    # load gallery data
    link_items_loaded = safe_load((_static_dir / "links" / file_name).read_text())
    image_404 = _images_dir / "404.png"

    link_items = []
    for item in link_items_loaded:
        check_item = link_img_dir / Path(item['img-bottom']).name
        if not(check_item.exists()):
            link_items.append(item)
    
    if len(link_items) == 0:
        return

    with sync_playwright() as p:
        # Generate our browser to visit pages and generate images
        for ii in range(3):
            try:
                browser = p.chromium.launch()
                break
            except TimeoutError:
                print(f"Browser start timed out. Trying again (attempt {ii+2}/3)")
        page = browser.new_page()

        for item in track(link_items, description="Generating screenshots..."):
            item["id"] = item["title"].lower().replace(" ", "_")
            screenshot = link_img_dir / f"{item['id']}.png"

            # Visit the page and take a screenshot
            for ii in range(3):
                try:
                    page.goto(item["website"])
                    page.screenshot(path=screenshot)
                    break
                except TimeoutError:
                    print(f"Page visit start timed out for: {item['website']}")
                    print(f"Trying again (attempt {ii+2}/3)")

            # copy the 404 only if the screenshot file was not manually
            # generated by a maintainer
            if not screenshot.is_file():
                print(f"Could not generate screenshot for {item['title']}, using 404.")
                copy(image_404, screenshot)

        # Clean up the browser since we no longer need it
        browser.close()
    print(f"Finished generating gallery images at: {link_img_dir}")


if __name__ == "__main__":
    import glob
    links_dir = Path(__file__).parents[1] / "docs" / "_static" / "links"
    files = glob.glob(f'{links_dir}/*.yaml')

    for f in files:
        regenerate_links(Path(f).name)
