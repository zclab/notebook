{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 07. N-Step Learning\n",
    "\n",
    "[R. S. Sutton, \"Learning to predict by the methods of temporal differences.\" Machine learning, 3(1):9â€“44, 1988.](http://incompleteideas.net/papers/sutton-88-with-erratum.pdf)\n",
    "\n",
    "Q-learning accumulates a single reward and then uses the greedy action at the next step to bootstrap. Alternatively, forward-view multi-step targets can be used (Sutton 1988). We call it Truncated N-Step Return\n",
    "from a given state $S_t$. It is defined as,\n",
    "\n",
    "$$\n",
    "R^{(n)}_t = \\sum_{k=0}^{n-1} \\gamma_t^{(k)} R_{t+k+1}.\n",
    "$$\n",
    "\n",
    "A multi-step variant of DQN is then defined by minimizing the alternative loss,\n",
    "\n",
    "$$\n",
    "(R^{(n)}_t + \\gamma^{(n)}_t \\max_{a'} q_{\\theta}^{-}\n",
    "(S_{t+n}, a')\n",
    "- q_{\\theta}(S_t, A_t))^2.\n",
    "$$\n",
    "\n",
    "Multi-step targets with suitably tuned $n$ often lead to faster learning (Sutton and Barto 1998)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from collections import deque\n",
    "from typing import Deque, Dict, List, Tuple\n",
    "\n",
    "import gym\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "from IPython.display import clear_output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Replay buffer for N-step learning\n",
    "\n",
    "There are a little bit changes in Replay buffer for N-step learning. First, we use `deque` to store the most recent n-step transitions.\n",
    "\n",
    "```python\n",
    "    self.n_step_buffer = deque(maxlen=n_step)\n",
    "```\n",
    "\n",
    "You can see it doesn't actually store a transition in the buffer, unless `n_step_buffer` is full.\n",
    "\n",
    "```\n",
    "    # in store method\n",
    "    if len(self.n_step_buffer) < self.n_step:\n",
    "        return ()\n",
    "```\n",
    "\n",
    "When the length of `n_step_buffer` becomes equal to N, it eventually stores the N-step transition, which is calculated by `_get_n_step_info` method.\n",
    "\n",
    "(Please see *01.dqn.ipynb* for detailed description of the basic replay buffer.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ReplayBuffer:\n",
    "    \"\"\"A simple numpy replay buffer.\"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self, \n",
    "        obs_dim: int, \n",
    "        size: int, \n",
    "        batch_size: int = 32, \n",
    "        n_step: int = 3, \n",
    "        gamma: float = 0.99,\n",
    "    ):\n",
    "        self.obs_buf = np.zeros([size, obs_dim], dtype=np.float32)\n",
    "        self.next_obs_buf = np.zeros([size, obs_dim], dtype=np.float32)\n",
    "        self.acts_buf = np.zeros([size], dtype=np.float32)\n",
    "        self.rews_buf = np.zeros([size], dtype=np.float32)\n",
    "        self.done_buf = np.zeros(size, dtype=np.float32)\n",
    "        self.max_size, self.batch_size = size, batch_size\n",
    "        self.ptr, self.size, = 0, 0\n",
    "        \n",
    "        # for N-step Learning\n",
    "        self.n_step_buffer = deque(maxlen=n_step)\n",
    "        self.n_step = n_step\n",
    "        self.gamma = gamma\n",
    "\n",
    "    def store(\n",
    "        self, \n",
    "        obs: np.ndarray, \n",
    "        act: np.ndarray, \n",
    "        rew: float, \n",
    "        next_obs: np.ndarray, \n",
    "        done: bool\n",
    "    ) -> Tuple[np.ndarray, np.ndarray, float, np.ndarray, bool]:\n",
    "        transition = (obs, act, rew, next_obs, done)\n",
    "        self.n_step_buffer.append(transition)\n",
    "\n",
    "        # single step transition is not ready\n",
    "        if len(self.n_step_buffer) < self.n_step:\n",
    "            return ()\n",
    "        \n",
    "        # make a n-step transition\n",
    "        rew, next_obs, done = self._get_n_step_info(\n",
    "            self.n_step_buffer, self.gamma\n",
    "        )\n",
    "        obs, act = self.n_step_buffer[0][:2]\n",
    "        \n",
    "        self.obs_buf[self.ptr] = obs\n",
    "        self.next_obs_buf[self.ptr] = next_obs\n",
    "        self.acts_buf[self.ptr] = act\n",
    "        self.rews_buf[self.ptr] = rew\n",
    "        self.done_buf[self.ptr] = done\n",
    "        self.ptr = (self.ptr + 1) % self.max_size\n",
    "        self.size = min(self.size + 1, self.max_size)\n",
    "        \n",
    "        return self.n_step_buffer[0]\n",
    "\n",
    "    def sample_batch(self) -> Dict[str, np.ndarray]:\n",
    "        indices = np.random.choice(\n",
    "            self.size, size=self.batch_size, replace=False\n",
    "        )\n",
    "\n",
    "        return dict(\n",
    "            obs=self.obs_buf[indices],\n",
    "            next_obs=self.next_obs_buf[indices],\n",
    "            acts=self.acts_buf[indices],\n",
    "            rews=self.rews_buf[indices],\n",
    "            done=self.done_buf[indices],\n",
    "            # for N-step Learning\n",
    "            indices=indices,\n",
    "        )\n",
    "    \n",
    "    def sample_batch_from_idxs(\n",
    "        self, indices: np.ndarray\n",
    "    ) -> Dict[str, np.ndarray]:\n",
    "        # for N-step Learning\n",
    "        return dict(\n",
    "            obs=self.obs_buf[indices],\n",
    "            next_obs=self.next_obs_buf[indices],\n",
    "            acts=self.acts_buf[indices],\n",
    "            rews=self.rews_buf[indices],\n",
    "            done=self.done_buf[indices],\n",
    "        )\n",
    "    \n",
    "    def _get_n_step_info(\n",
    "        self, n_step_buffer: Deque, gamma: float\n",
    "    ) -> Tuple[np.int64, np.ndarray, bool]:\n",
    "        \"\"\"Return n step rew, next_obs, and done.\"\"\"\n",
    "        # info of the last transition\n",
    "        rew, next_obs, done = n_step_buffer[-1][-3:]\n",
    "\n",
    "        for transition in reversed(list(n_step_buffer)[:-1]):\n",
    "            r, n_o, d = transition[-3:]\n",
    "\n",
    "            rew = r + gamma * rew * (1 - d)\n",
    "            next_obs, done = (n_o, d) if d else (next_obs, done)\n",
    "\n",
    "        return rew, next_obs, done\n",
    "\n",
    "    def __len__(self) -> int:\n",
    "        return self.size"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Network\n",
    "\n",
    "We are going to use a simple network architecture with three fully connected layers and two non-linearity functions (ReLU)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Network(nn.Module):\n",
    "    def __init__(self, in_dim: int, out_dim: int):\n",
    "        \"\"\"Initialization.\"\"\"\n",
    "        super(Network, self).__init__()\n",
    "\n",
    "        self.layers = nn.Sequential(\n",
    "            nn.Linear(in_dim, 128), \n",
    "            nn.ReLU(),\n",
    "            nn.Linear(128, 128), \n",
    "            nn.ReLU(), \n",
    "            nn.Linear(128, out_dim)\n",
    "        )\n",
    "\n",
    "    def forward(self, x: torch.Tensor) -> torch.Tensor:\n",
    "        \"\"\"Forward method implementation.\"\"\"\n",
    "        return self.layers(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DQN Agent + N-step learning Agent\n",
    "\n",
    "Here is a summary of DQNAgent class.\n",
    "\n",
    "| Method           | Note                                                 |\n",
    "| ---              | ---                                                  |\n",
    "|select_action     | select an action from the input state.               |\n",
    "|step              | take an action and return the response of the env.   |\n",
    "|compute_dqn_loss  | return dqn loss.                                     |\n",
    "|update_model      | update the model by gradient descent.                |\n",
    "|target_hard_update| hard update from the local model to the target model.|\n",
    "|train             | train the agent during num_frames.                   |\n",
    "|test              | test the agent (1 episode).                          |\n",
    "|plot              | plot the training progresses.                        |\n",
    "\n",
    "We use two buffers: `memory` and `memory_n` for 1-step transitions and n-step transitions respectively. It guarantees that any paired 1-step and n-step transitions have the same indices (See `step` method for more details). Due to the reason, we can sample pairs of transitions from the two buffers once we have indices for samples.\n",
    "\n",
    "```python\n",
    "    def update_model(self) -> torch.Tensor:\n",
    "        ...\n",
    "        samples = self.memory.sample_batch()\n",
    "        indices = samples[\"indices\"]\n",
    "        ...\n",
    "        \n",
    "        # N-step Learning loss\n",
    "        if self.use_n_step:\n",
    "            samples = self.memory_n.sample_batch_from_idxs(indices)\n",
    "            ...\n",
    "```\n",
    "\n",
    "One thing to note that  we are gonna combine 1-step loss and n-step loss so as to control high-variance / high-bias trade-off.\n",
    "\n",
    "(Search the comments with *N-step Leaning* to see any difference from DQN.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DQNAgent:\n",
    "    \"\"\"DQN Agent interacting with environment.\n",
    "    \n",
    "    Attribute:\n",
    "        env (gym.Env): openAI Gym environment\n",
    "        memory (ReplayBuffer): replay memory to store transitions\n",
    "        batch_size (int): batch size for sampling\n",
    "        epsilon (float): parameter for epsilon greedy policy\n",
    "        epsilon_decay (float): step size to decrease epsilon\n",
    "        max_epsilon (float): max value of epsilon\n",
    "        min_epsilon (float): min value of epsilon\n",
    "        target_update (int): period for target model's hard update\n",
    "        gamma (float): discount factor\n",
    "        dqn (Network): model to train and select actions\n",
    "        dqn_target (Network): target model to update\n",
    "        optimizer (torch.optim): optimizer for training dqn\n",
    "        transition (list): transition information including \n",
    "                           state, action, reward, next_state, done\n",
    "        use_n_step (bool): whether to use n_step memory\n",
    "        n_step (int): step number to calculate n-step td error\n",
    "        memory_n (ReplayBuffer): n-step replay buffer\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self, \n",
    "        env: gym.Env,\n",
    "        memory_size: int,\n",
    "        batch_size: int,\n",
    "        target_update: int,\n",
    "        epsilon_decay: float,\n",
    "        max_epsilon: float = 1.0,\n",
    "        min_epsilon: float = 0.1,\n",
    "        gamma: float = 0.99,\n",
    "        # N-step Learning\n",
    "        n_step: int = 3,\n",
    "    ):\n",
    "        \"\"\"Initialization.\n",
    "        \n",
    "        Args:\n",
    "            env (gym.Env): openAI Gym environment\n",
    "            memory_size (int): length of memory\n",
    "            batch_size (int): batch size for sampling\n",
    "            target_update (int): period for target model's hard update\n",
    "            epsilon_decay (float): step size to decrease epsilon\n",
    "            lr (float): learning rate\n",
    "            max_epsilon (float): max value of epsilon\n",
    "            min_epsilon (float): min value of epsilon\n",
    "            gamma (float): discount factor\n",
    "            n_step (int): step number to calculate n-step td error\n",
    "        \"\"\"\n",
    "        obs_dim = env.observation_space.shape[0]\n",
    "        action_dim = env.action_space.n\n",
    "        \n",
    "        self.env = env\n",
    "        self.batch_size = batch_size\n",
    "        self.epsilon = max_epsilon\n",
    "        self.epsilon_decay = epsilon_decay\n",
    "        self.max_epsilon = max_epsilon\n",
    "        self.min_epsilon = min_epsilon\n",
    "        self.target_update = target_update\n",
    "        self.gamma = gamma\n",
    "        \n",
    "        # memory for 1-step Learning\n",
    "        self.memory = ReplayBuffer(\n",
    "            obs_dim, memory_size, batch_size, n_step=1\n",
    "        )\n",
    "        \n",
    "        # memory for N-step Learning\n",
    "        self.use_n_step = True if n_step > 1 else False\n",
    "        if self.use_n_step:\n",
    "            self.n_step = n_step\n",
    "            self.memory_n = ReplayBuffer(\n",
    "                obs_dim, memory_size, batch_size, n_step=n_step, gamma=gamma\n",
    "            )\n",
    "        \n",
    "        # device: cpu / gpu\n",
    "        self.device = torch.device(\n",
    "            \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
    "        )\n",
    "        print(self.device)\n",
    "\n",
    "        # networks: dqn, dqn_target\n",
    "        self.dqn = Network(obs_dim, action_dim).to(self.device)\n",
    "        self.dqn_target = Network(obs_dim, action_dim).to(self.device)\n",
    "        self.dqn_target.load_state_dict(self.dqn.state_dict())\n",
    "        self.dqn_target.eval()\n",
    "        \n",
    "        # optimizer\n",
    "        self.optimizer = optim.Adam(self.dqn.parameters())\n",
    "\n",
    "        # transition to store in memory\n",
    "        self.transition = list()\n",
    "        \n",
    "        # mode: train / test\n",
    "        self.is_test = False\n",
    "\n",
    "    def select_action(self, state: np.ndarray) -> np.ndarray:\n",
    "        \"\"\"Select an action from the input state.\"\"\"\n",
    "        # epsilon greedy policy\n",
    "        if self.epsilon > np.random.random():\n",
    "            selected_action = self.env.action_space.sample()\n",
    "        else:\n",
    "            selected_action = self.dqn(\n",
    "                torch.FloatTensor(state).to(self.device)\n",
    "            ).argmax()\n",
    "            selected_action = selected_action.detach().cpu().numpy()\n",
    "        \n",
    "        if not self.is_test:\n",
    "            self.transition = [state, selected_action]\n",
    "        \n",
    "        return selected_action\n",
    "\n",
    "    def step(self, action: np.ndarray) -> Tuple[np.ndarray, np.float64, bool]:\n",
    "        \"\"\"Take an action and return the response of the env.\"\"\"\n",
    "        next_state, reward, done, _ = self.env.step(action)\n",
    "\n",
    "        if not self.is_test:\n",
    "            self.transition += [reward, next_state, done]\n",
    "            \n",
    "            # N-step transition\n",
    "            if self.use_n_step:\n",
    "                one_step_transition = self.memory_n.store(*self.transition)\n",
    "            # 1-step transition\n",
    "            else:\n",
    "                one_step_transition = self.transition\n",
    "\n",
    "            # add a single step transition\n",
    "            if one_step_transition:\n",
    "                self.memory.store(*one_step_transition)\n",
    "    \n",
    "        return next_state, reward, done\n",
    "\n",
    "    def update_model(self) -> torch.Tensor:\n",
    "        \"\"\"Update the model by gradient descent.\"\"\"\n",
    "        samples = self.memory.sample_batch()\n",
    "        indices = samples[\"indices\"]\n",
    "        loss = self._compute_dqn_loss(samples, self.gamma)\n",
    "        \n",
    "        # N-step Learning loss\n",
    "        # we are gonna combine 1-step loss and n-step loss so as to\n",
    "        # prevent high-variance.\n",
    "        if self.use_n_step:\n",
    "            samples = self.memory_n.sample_batch_from_idxs(indices)\n",
    "            gamma = self.gamma ** self.n_step\n",
    "            n_loss = self._compute_dqn_loss(samples, gamma)\n",
    "            loss += n_loss\n",
    "\n",
    "        self.optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        self.optimizer.step()\n",
    "\n",
    "        return loss.item()\n",
    "        \n",
    "    def train(self, num_frames: int, plotting_interval: int = 200):\n",
    "        \"\"\"Train the agent.\"\"\"\n",
    "        self.is_test = False\n",
    "        \n",
    "        state = self.env.reset()\n",
    "        update_cnt = 0\n",
    "        epsilons = []\n",
    "        losses = []\n",
    "        scores = []\n",
    "        score = 0\n",
    "\n",
    "        for frame_idx in range(1, num_frames + 1):\n",
    "            action = self.select_action(state)\n",
    "            next_state, reward, done = self.step(action)\n",
    "\n",
    "            state = next_state\n",
    "            score += reward\n",
    "\n",
    "            # if episode ends\n",
    "            if done:\n",
    "                state = self.env.reset()\n",
    "                scores.append(score)\n",
    "                score = 0\n",
    "\n",
    "            # if training is ready\n",
    "            if len(self.memory) >= self.batch_size:\n",
    "                loss = self.update_model()\n",
    "                losses.append(loss)\n",
    "                update_cnt += 1\n",
    "                \n",
    "                # linearly decrease epsilon\n",
    "                self.epsilon = max(\n",
    "                    self.min_epsilon, self.epsilon - (\n",
    "                        self.max_epsilon - self.min_epsilon\n",
    "                    ) * self.epsilon_decay\n",
    "                )\n",
    "                epsilons.append(self.epsilon)\n",
    "                \n",
    "                # if hard update is needed\n",
    "                if update_cnt % self.target_update == 0:\n",
    "                    self._target_hard_update()\n",
    "\n",
    "            # plotting\n",
    "            if frame_idx % plotting_interval == 0:\n",
    "                self._plot(frame_idx, scores, losses, epsilons)\n",
    "                \n",
    "        self.env.close()\n",
    "                \n",
    "    def test(self, video_folder: str) -> None:\n",
    "        \"\"\"Test the agent.\"\"\"\n",
    "        self.is_test = True\n",
    "        \n",
    "        # for recording a video\n",
    "        naive_env = self.env\n",
    "        self.env = gym.wrappers.RecordVideo(self.env, video_folder=video_folder)\n",
    "        \n",
    "        state = self.env.reset()\n",
    "        done = False\n",
    "        score = 0\n",
    "        \n",
    "        while not done:\n",
    "            action = self.select_action(state)\n",
    "            next_state, reward, done = self.step(action)\n",
    "\n",
    "            state = next_state\n",
    "            score += reward\n",
    "        \n",
    "        print(\"score: \", score)\n",
    "        self.env.close()\n",
    "        \n",
    "        # reset\n",
    "        self.env = naive_env\n",
    "        \n",
    "    def _compute_dqn_loss(\n",
    "        self, \n",
    "        samples: Dict[str, np.ndarray], \n",
    "        gamma: float\n",
    "    ) -> torch.Tensor:\n",
    "        \"\"\"Return dqn loss.\"\"\"\n",
    "        device = self.device  # for shortening the following lines\n",
    "        state = torch.FloatTensor(samples[\"obs\"]).to(device)\n",
    "        next_state = torch.FloatTensor(samples[\"next_obs\"]).to(device)\n",
    "        action = torch.LongTensor(samples[\"acts\"].reshape(-1, 1)).to(device)\n",
    "        reward = torch.FloatTensor(samples[\"rews\"].reshape(-1, 1)).to(device)\n",
    "        done = torch.FloatTensor(samples[\"done\"].reshape(-1, 1)).to(device)\n",
    "\n",
    "        # G_t   = r + gamma * v(s_{t+1})  if state != Terminal\n",
    "        #       = r                       otherwise\n",
    "        curr_q_value = self.dqn(state).gather(1, action)\n",
    "        next_q_value = self.dqn_target(next_state).max(\n",
    "            dim=1, keepdim=True\n",
    "        )[0].detach()\n",
    "        mask = 1 - done\n",
    "        target = (reward + gamma * next_q_value * mask).to(self.device)\n",
    "\n",
    "        # calculate dqn loss\n",
    "        loss = F.smooth_l1_loss(curr_q_value, target)\n",
    "\n",
    "        return loss\n",
    "\n",
    "    def _target_hard_update(self):\n",
    "        \"\"\"Hard update: target <- local.\"\"\"\n",
    "        self.dqn_target.load_state_dict(self.dqn.state_dict())\n",
    "                \n",
    "    def _plot(\n",
    "        self, \n",
    "        frame_idx: int, \n",
    "        scores: List[float], \n",
    "        losses: List[float], \n",
    "        epsilons: List[float],\n",
    "    ):\n",
    "        \"\"\"Plot the training progresses.\"\"\"\n",
    "        clear_output(True)\n",
    "        plt.figure(figsize=(20, 5))\n",
    "        plt.subplot(131)\n",
    "        plt.title('frame %s. score: %s' % (frame_idx, np.mean(scores[-10:])))\n",
    "        plt.plot(scores)\n",
    "        plt.subplot(132)\n",
    "        plt.title('loss')\n",
    "        plt.plot(losses)\n",
    "        plt.subplot(133)\n",
    "        plt.title('epsilons')\n",
    "        plt.plot(epsilons)\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Environment\n",
    "\n",
    "You can see the [code](https://github.com/openai/gym/blob/master/gym/envs/classic_control/cartpole.py) and [configurations](https://github.com/openai/gym/blob/master/gym/envs/__init__.py#L53) of CartPole-v0 from OpenAI's repository."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# environment\n",
    "env_id = \"CartPole-v0\"\n",
    "env = gym.make(env_id)\n",
    "if IN_COLAB:\n",
    "    env = gym.wrappers.Monitor(env, \"videos\", force=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Set random seed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[777]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "seed = 777\n",
    "\n",
    "def seed_torch(seed):\n",
    "    torch.manual_seed(seed)\n",
    "    if torch.backends.cudnn.enabled:\n",
    "        torch.backends.cudnn.benchmark = False\n",
    "        torch.backends.cudnn.deterministic = True\n",
    "\n",
    "np.random.seed(seed)\n",
    "seed_torch(seed)\n",
    "env.seed(seed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cpu\n"
     ]
    }
   ],
   "source": [
    "# parameters\n",
    "num_frames = 20000\n",
    "memory_size = 2000\n",
    "batch_size = 32\n",
    "target_update = 100\n",
    "epsilon_decay = 1 / 2000\n",
    "\n",
    "# train\n",
    "agent = DQNAgent(env, memory_size, batch_size, target_update, epsilon_decay)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "agent.train(num_frames)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test\n",
    "\n",
    "Run the trained agent (1 episode)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "score:  200.0\n"
     ]
    }
   ],
   "source": [
    "video_folder=\"videos/n_step_learning\"\n",
    "agent.test(video_folder=video_folder)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Render"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <video width=\"320\" height=\"240\" alt=\"test\" controls>\n",
       "        <source src=\"data:video/mp4;base64,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AAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAACAAAAABxzdHNjAAAAAAAAAAEAAAABAAAAyQAAAAEAAAM4c3RzegAAAAAAAAAAAAAAyQAABrIAAAD8AAAAuwAAAGoAAAB9AAABgAAAAK4AAABrAAABUQAAALQAAACQAAAAegAAALMAAACaAAAAbgAAAHgAAADYAAAAoQAAAGMAAABmAAAA6QAAAMAAAADFAAAAXQAAAMAAAACjAAAAnAAAAFwAAAB5AAAAkQAAAFgAAACIAAAAogAAAI4AAABPAAAAVgAAAM8AAAB/AAAAaAAAAGgAAACcAAAAfAAAAF4AAAA+AAAAvgAAAIIAAABTAAAAXQAAALoAAAB8AAAAVwAAAEcAAAChAAAAcwAAAFIAAABpAAAAxAAAAH0AAABdAAAAcQAAAFwAAACAAAAAbQAAAEsAAABdAAAAUwAAAEoAAABKAAAAjgAAAI0AAABHAAAARwAAAHYAAABeAAAARgAAADgAAAClAAAAXgAAAE8AAABSAAAAwgAAAGQAAABEAAAAXwAAAJoAAACLAAAAZwAAAEkAAACMAAAAagAAAFgAAABGAAAAbQAAAHkAAABEAAAAYgAAAH8AAABfAAAAPAAAAD0AAABvAAAAVgAAAEYAAABKAAAAYQAAAFoAAABAAAAATQAAAIwAAABXAAAARwAAAFAAAABoAAAAYwAAAEoAAABJAAAAjgAAAHcAAABhAAAARgAAAKIAAABlAAAAUgAAADoAAACqAAAAaQAAAEYAAABWAAAAigAAAIoAAABaAAAATwAAAJ0AAAB3AAAAUwAAAEAAAACJAAAAVwAAADsAAABRAAAAWAAAAIAAAABZAAAAPwAAAHgAAABHAAAAKAAAAEUAAAB0AAAAZQAAAEsAAAA6AAAAggAAAH0AAABcAAAAUQAAAG4AAABaAAAAPQAAADgAAABiAAAAdgAAAE4AAABDAAAAcwAAAGMAAAA+AAAARAAAAHgAAACWAAAAUAAAAFkAAABxAAAAWgAAAD4AAAA7AAAAawAAAFkAAAA2AAAAMQAAAF4AAABZAAAAOgAAAE4AAABdAAAATgAAACwAAAA5AAAAgAAAAFcAAABJAAAAMwAAAFoAAABSAAAASwAAADoAAAB1AAAAZAAAAFAAAABJAAAAWgAAABRzdGNvAAAAAAAAAAEAAAAwAAAAYnVkdGEAAABabWV0YQAAAAAAAAAhaGRscgAAAAAAAAAAbWRpcmFwcGwAAAAAAAAAAAAAAAAtaWxzdAAAACWpdG9vAAAAHWRhdGEAAAABAAAAAExhdmY1OC43Ni4xMDA=\" type=\"video/mp4\"/>\n",
       "        </video>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Played: videos/n_step_learning/rl-video-episode-0.mp4\n"
     ]
    }
   ],
   "source": [
    "import base64\n",
    "import glob\n",
    "import io\n",
    "import os\n",
    "\n",
    "from IPython.display import HTML, display\n",
    "\n",
    "\n",
    "def ipython_show_video(path: str) -> None:\n",
    "    \"\"\"Show a video at `path` within IPython Notebook.\"\"\"\n",
    "    if not os.path.isfile(path):\n",
    "        raise NameError(\"Cannot access: {}\".format(path))\n",
    "\n",
    "    video = io.open(path, \"r+b\").read()\n",
    "    encoded = base64.b64encode(video)\n",
    "\n",
    "    display(HTML(\n",
    "        data=\"\"\"\n",
    "        <video width=\"320\" height=\"240\" alt=\"test\" controls>\n",
    "        <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\"/>\n",
    "        </video>\n",
    "        \"\"\".format(encoded.decode(\"ascii\"))\n",
    "    ))\n",
    "\n",
    "\n",
    "def show_latest_video(video_folder: str) -> str:\n",
    "    \"\"\"Show the most recently recorded video from video folder.\"\"\"\n",
    "    list_of_files = glob.glob(os.path.join(video_folder, \"*.mp4\"))\n",
    "    latest_file = max(list_of_files, key=os.path.getctime)\n",
    "    ipython_show_video(latest_file)\n",
    "    return latest_file\n",
    "\n",
    "\n",
    "latest_file = show_latest_video(video_folder=video_folder)\n",
    "print(\"Played:\", latest_file)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
